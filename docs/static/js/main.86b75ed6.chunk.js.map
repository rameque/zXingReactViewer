{"version":3,"sources":["ZxingCodeViewer.js","App.js","serviceWorker.js","index.js"],"names":["codeReader","BrowserQRCodeReader","codeReaderDNI","BrowserPDF417Reader","ZxingCodeViewer","props","state","file","result","resultImage","imageAvailable","textInput","React","createRef","ImageScan","reset","type","reader","this","decodeFromImage","current","then","rst","writeResultImage","catch","err","console","error","listVideoInputDevices","videoInputDevices","forEach","device","decodeFromVideo","response","setState","text","split","decodeFromInputVideoDeviceContinuously","undefined","callbackDecodingVideo","log","resultText","infoFounded","stopContinuousDecode","writeResult","stopStreams","className","id","width","height","onClick","scanFromVideo","bind","ref","onChange","readURL","forceOpenFile","src","alt","scanFromImage","map","index","key","click","event","URL","createObjectURL","target","files","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.86b75ed6.chunk.js","sourcesContent":["import { BrowserPDF417Reader, BrowserQRCodeReader } from '@zxing/library';\nimport React, { Component } from 'react';\n\nconst codeReader = new BrowserQRCodeReader();\nconst codeReaderDNI = new BrowserPDF417Reader();\n\nclass ZxingCodeViewer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      file: 'http://placehold.it/314x222',\n      result: ['No result'],\n      resultImage: ['No result'],\n      imageAvailable: false\n    }\n\n    this.textInput = React.createRef();\n    this.ImageScan = React.createRef();\n    codeReader.reset();\n    codeReaderDNI.reset();\n  }\n\n  scanFromImage(type) {\n    let result;\n    let reader = (type) ? codeReaderDNI : codeReader;\n    if (this.state.imageAvailable) {\n      result = reader.decodeFromImage(this.ImageScan.current)\n      result.then(rst => this.writeResultImage(rst)).catch(err => console.error(err))\n    }\n  }\n\n  scanFromVideo(type) {\n    let reader = (type) ? codeReaderDNI : codeReader;\n    reader.listVideoInputDevices()\n      .then(videoInputDevices => {\n        videoInputDevices.forEach(device => {\n          this.decodeFromVideo();\n        });\n      })\n      .catch(err => console.error(err));\n  }\n\n  writeResultImage(response) {\n    this.setState({\n      resultImage: response.text.split('@')\n    })\n  }\n\n  writeResult(response) {\n    this.setState({\n      result: response.text\n    })\n  }\n\n  decodeFromVideo(type) {\n    let reader = (type) ? codeReaderDNI : codeReader;\n    reader.decodeFromInputVideoDeviceContinuously(undefined, 'video', (result, err) => this.callbackDecodingVideo(result, err))\n      .then(result => console.log(result))\n      .catch(err => console.error(err));\n\n  }\n\n  callbackDecodingVideo(result, err) {\n    let resultText = '';\n    let infoFounded = false;\n    if (result) {\n      infoFounded = true;\n    } else {\n      if (err) {\n        resultText = 'Trying to Decode:' + err;\n      }\n    }\n\n    console.log(resultText);\n\n    if(infoFounded){\n      this.stopContinuousDecode();\n      this.writeResult(result);\n    }\n  }\n\n  stopContinuousDecode() {\n    codeReaderDNI.stopContinuousDecode();\n    codeReaderDNI.stopStreams();\n\n    codeReader.stopContinuousDecode();\n    codeReader.stopStreams();\n\n    codeReader.reset();\n    codeReaderDNI.reset();\n  }\n\n\n  render() {\n    return (<>\n      <div className=\"block\">\n        <h2>Video</h2>\n        <video id=\"video\" width=\"310\" height=\"220\" className=\"video\"></video>\n        <div className=\"buttons\">\n          <div className=\"wrapButtons\">\n            <button onClick={this.scanFromVideo.bind(this)} className=\"run\">SCAN QRCODE</button>\n            <button onClick={this.scanFromVideo.bind(this, 'DNI')} className=\"run\">SCAN DNI</button>\n          </div>\n          <button onClick={this.stopContinuousDecode.bind(this)} className=\"stop\">STOP</button>\n        </div>\n        <div className=\"logger\">\n          {this.state.result}\n        </div>\n      </div>\n      <hr />\n      <div className=\"block\">\n        <h2>Image</h2>\n        <input className=\"fileHiden\" type=\"file\" ref={this.textInput} onChange={this.readURL.bind(this)}></input>\n        <div className=\"wrapper-image\" onClick={this.forceOpenFile.bind(this)}>\n          <img src={this.state.file} alt=\"imgSrc\" ref={this.ImageScan}></img>\n        </div>\n        <div>\n          <button onClick={this.scanFromImage.bind(this)}>SCAN DNI FROM IMAGE</button>\n        </div>\n        <div>{this.state.resultImage.map((text, index) => (<p key={index}>{text}</p>))}</div>\n      </div>\n    </>)\n  }\n\n  forceOpenFile() {\n    this.textInput.current.click();\n  }\n\n  readURL(event) {\n    this.setState({\n      imageAvailable: true,\n      file: URL.createObjectURL(event.target.files[0])\n    })\n  }\n}\n\nexport default ZxingCodeViewer;\n\n // use this path since v0.5.1\n\n","import './App.css';\n\nimport React from 'react';\nimport ZxingCodeViewer from './ZxingCodeViewer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ZxingCodeViewer></ZxingCodeViewer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}